@prefix sd:    <http://www.w3.org/ns/sparql-service-description#>.
@prefix shacl: <http://www.w3.org/ns/shacl#>.
@prefix sp:    <http://spinrdf.org/sp#> .
@prefix sms:   <http://sms.i3s.unice.fr/terms/api/>

WITH  <{MatchmakingGraph}>
INSERT {
  ?service a sd:Service;
    sms:elements [
      sms:triple ?strTP;            # the formatted triple pattern
      sms:optionalNode ?optional;   # the OPTIONAL node that contains the triple pattern
    ]
}
USING <{SpinQueryGraph}>
{Using_Clauses}
WHERE {
    ?service a sd:Service; sd:defaultDataset [ sd:defaultGraph [ shacl:shapesGraph ?shapesGraph ]].
    GRAPH ?shapesGraph {
      ?nodeShape a shacl:NodeShape; shacl:property ?propShape.
      ?propShape shacl:path ?p.
      OPTIONAL { ?propShape shacl:nodeKind ?nodeType. }
      OPTIONAL { ?propShape shacl:hasValue ?nodeValue. }
    }

    # Get each triple pattern from the client query
    ?triple sp:subject ?s; sp:predicate ?p; sp:object ?o.

    # Check if the subject/predicate/object are variables
    OPTIONAL { ?s sp:varName ?varNameS. }
    OPTIONAL { ?p sp:varName ?varNameP. }
    OPTIONAL { ?o sp:varName ?varNameO. }

    # Check whether the triple pattern is embedded in an sp:Optional node
    OPTIONAL { ?optional a sp:Optional; sp:elements/(rdf:rest|rdf:first)* ?triple. }

    FILTER (
      bound(?varNameO)
      ||
      !bound(?varNameO) && !bound(?nodeType) && !bound(?nodeValue)
      ||
      bound(?nodeType) &&
        ((?nodeType = shacl:Literal && isLiteral(?o)) || (?nodeType = shacl:IRI && isIRI(?o)))
      ||
      bound(?nodeValue) && (?o = ?nodeValue)
    )

    # Produce a string representation of the triple pattern
    BIND(if(bound(?varNameS), concat("?", ?varNameS), sms:strRep(?s)) as ?subject)
    BIND(if(bound(?varNameP), concat("?", ?varNameP), sms:strRep(?p)) as ?predicate)
    BIND(if(bound(?varNameO), concat("?", ?varNameO), sms:strRep(?o)) as ?object)
    BIND(concat(?subject, " ", ?predicate, " ", ?object, ".") as ?strTP)
}

function sms:strRep(?x) {
    if ( isLiteral(?x), concat("\"", str(?x), "\""),
      if ( isIRI(?x), concat("<", str(?x), ">"), str(?x) )
    )
}
