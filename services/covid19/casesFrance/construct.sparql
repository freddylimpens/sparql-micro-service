# Schema.org vocabulary info: https://github.com/schemaorg/schemaorg/issues/2490

@prefix wd:     <http://www.wikidata.org/entity/> .
@prefix wdt:    <http://www.wikidata.org/prop/direct/> .
@prefix covid:  <http://ns.inria.fr/covid19/>.
@prefix covidpr:<http://ns.inria.fr/covid19/property/>.

CONSTRUCT {
    []
        a                           schema:SpecialAnnouncement;
        schema:category             <http://www.wikidata.org/entity/Q81068910>; # Covid19 pandemic
        schema:datePosted           ?dateTyped;
        schema:url                  ?srcUrlIri;
        schema:sourceOrganization   ?srcName;
        schema:spatialCoverage      ?location;
        schema:diseaseSpreadStatistics
            ?casConfirmesBN, ?decesBN, ?decesEphadBN, ?hospitalisesBN, ?reanimationBN, ?guerisBN.
        
        ?location
            a                   ?locationType;
            schema:name         ?locationName;
            schema:identifier   ?2DlocationCode.

        ?casConfirmesBN
            a schema:Observation;
            rdfs:label "number of confirmed cases";
            schema:measuredProperty wdt:P1603;
            schema:measuredValue ?casConfirmes.
        
        ?decesBN
            a schema:Observation;
            rdfs:label "number of deaths";
            schema:measuredProperty wdt:P1120;
            schema:measuredValue ?deces.

        ?decesEphadBN
            a schema:Observation;
            rdfs:label "number of deaths in Ephad";
            schema:measuredProperty covidpr:noDeathsEphad;
            schema:measuredValue ?decesEphad.

        ?hospitalisesBN
            a schema:Observation;
            rdfs:label "number of hospitalized cases";
            schema:measuredProperty wdt:P8049;
            schema:measuredValue ?hospitalises.
        
        ?reanimationBN
            a schema:Observation;
            rdfs:label "number of cases in intensive care";
            schema:measuredProperty covidpr:noCasesIntensiveCare;
            schema:measuredValue ?reanimation.
        
        ?guerisBN
            a schema:Observation;
            rdfs:label "number of recoveries";
            schema:measuredProperty wdt:P8010;
            schema:measuredValue ?gueris.
}
WHERE {
    ?measure 
        api:date        ?date;
        api:nom         ?locationName;
        api:code        ?locationCode;
        api:source      ?src;
        api:sourceType  ?srcType.
        
    ?src api:nom        ?srcName.
    optional { ?src api:url ?srcUrl }

    optional { ?measure api:casConfirmes    ?casConfirmes }
    optional { ?measure api:deces           ?deces }
    optional { ?measure api:decesEhpad      ?decesEphad }
    optional { ?measure api:hospitalises    ?hospitalises }
    optional { ?measure api:reanimation     ?reanimation }
    optional { ?measure api:gueris          ?gueris }
    
    bind(strdt(?date, xsd:date) as ?dateTyped)
    bind(iri(?srcUrl)           as ?srcUrlIri)
    
    bind(covid:getLocationType(?locationCode)   as ?locationType)
    bind(covid:getLocationCode(?locationCode)   as ?2DlocationCode)
    
    # Create IRI for locations (depts, regions, collectivity)
    bind(IRI(
        concat("http://ns.inria.fr/covid19/casesFrance/location/", ?locationCode)
        ) as ?location)

    # Create blank nodes only for the stats that we obtained
    bind(bnode(?casConfirmes) as    ?casConfirmesBN)
    bind(bnode(?deces) as           ?decesBN)
    bind(bnode(?decesEphad) as      ?decesEphadBN)
    bind(bnode(?hospitalises) as    ?hospitalisesBN)
    bind(bnode(?reanimation) as     ?reanimationBN)
    bind(bnode(?gueris) as          ?guerisBN)
    
    
}


function covid:getLocationType(?locCode) {
    if      (?locCode = "FRA")               { return(schema:State) }
    else if (strstarts(?locCode, "REG"))     { return(wd:Q36784) }  # region of France
    else if (strstarts(?locCode, "DEP"))     { return(wd:Q6465) }   # department of France
    else if (strstarts(?locCode, "COM"))     { return(wd:Q719487) } # overseas collectivity 
    else if (strstarts(?locCode, "WORLD"))   { return(wd:Q16502) }  # world
}


function covid:getLocationCode(?locCode) {
    if (regex(?locCode, "^(REG|DEP|COM)")) { return(substr(?locCode, 5)) }
}
